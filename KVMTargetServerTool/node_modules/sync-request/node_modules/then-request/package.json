{
  "name": "then-request",
  "version": "1.0.4",
  "description": "A request library that returns promises, inspired by request",
  "keywords": [],
  "browser": "./browser.js",
  "dependencies": {
    "promise": "^6.0.0",
    "concat-stream": "^1.4.6",
    "qs": "^2.2.3",
    "http-response-object": "^1.0.1",
    "http-basic": "^1.0.3"
  },
  "devDependencies": {
    "testit": "^1.2.0",
    "istanbul": "^0.3.0"
  },
  "scripts": {
    "test": "node test/index.js && istanbul cover test/index.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/then/request.git"
  },
  "author": {
    "name": "ForbesLindesay"
  },
  "license": "MIT",
  "readme": "# then-request\r\n\r\nA request library that returns promises, inspired by request\r\n\r\n[![Build Status](https://img.shields.io/travis/then/request/master.svg)](https://travis-ci.org/then/request)\r\n[![Dependency Status](https://img.shields.io/gemnasium/then/request.svg)](https://gemnasium.com/then/request)\r\n[![NPM version](https://img.shields.io/npm/v/then-request.svg)](https://www.npmjs.org/package/then-request)\r\n\r\n## Installation\r\n\r\n    npm install then-request\r\n\r\n## Usage\r\n\r\n`request(method, url, options, callback?)`\r\n\r\ne.g.\r\n\r\n```js\r\nrequest('GET', 'http://example.com').done(function (res) {\r\n  console.log(res.getBody());\r\n});\r\n```\r\n\r\n**Method:**\r\n\r\nAn HTTP method (e.g. `GET`, `POST`, `PUT`, `DELETE` or `HEAD`). It is not case sensitive.\r\n\r\n**URL:**\r\n\r\nA url as a string (e.g. `http://example.com`). Relative URLs are allowed in the browser.\r\n\r\n**Options:**\r\n\r\n - `qs` - an object containing querystring values to be appended to the uri\r\n - `headers` - http headers (default: `{}`)\r\n - `body` - body for PATCH, POST and PUT requests.  Must be a `Buffer` or `String` (only strings are accepted client side)\r\n - `json` - sets `body` but to JSON representation of value and adds `Content-type: application/json`.  Does not have any affect on how the response is treated.\r\n - `cache` - only used in node.js (browsers already have their own caches) Can be `'memory'`, `'file'` or your own custom implementaton (see https://github.com/ForbesLindesay/http-basic#implementing-a-cache).\r\n\r\n**Callback / Returns:**\r\n\r\nIf a callback is provided it is called with `err` and `res`. If no callback is provided, a [Promise](https://www.promisejs.org/) is returned that eventually resolves to `res`.  The resulting Promise also has an additional `.getBody(encoding?)` method that is equivallent to calling `.then(function (res) { return res.getBody(); })`.\r\n\r\n### Response\r\n\r\nNote that even for status codes that represent an error, the promise will be resolved as the request succeeded.  You can call `getBody` if you want to error on invalid status codes.  The response has the following properties:\r\n\r\n - `statusCode` - a number representing the HTTP status code\r\n - `headers` - http response headers\r\n - `body` - a string if in the browser or a buffer if on the server\r\n\r\nIt also has a method `getBody(encoding?)` which looks like:\r\n\r\n```js\r\nfunction getBody(encoding) {\r\n  if (this.statusCode >= 300) {\r\n    var err = new Error('Server responded with status code ' + this.statusCode + ':\\n' + this.body.toString(encoding));\r\n    err.statusCode = this.statusCode;\r\n    err.headers = this.headers;\r\n    err.body = this.body;\r\n    throw err;\r\n  }\r\n  return encoding ? this.body.toString(encoding) : this.body;\r\n}\r\n```\r\n\r\n## License\r\n\r\n  MIT\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/then/request/issues"
  },
  "homepage": "https://github.com/then/request",
  "_id": "then-request@1.0.4",
  "_shasum": "b49d4436e74777d756adb674d1dd80e201933cd5",
  "_from": "then-request@^1.0.2",
  "_resolved": "https://registry.npmjs.org/then-request/-/then-request-1.0.4.tgz"
}
